'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _corpse = require('./lib/corpse');

var _corpse2 = _interopRequireDefault(_corpse);

var _har = require('./lib/har');

var _har2 = _interopRequireDefault(_har);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Main = function () {
  function Main() {
    _classCallCheck(this, Main);
  }

  _createClass(Main, [{
    key: 'run',
    value: function run() {
      var harfile = void 0,
          port = void 0,
          url = void 0;

      var app = (0, _express2.default)();

      var harOpt = process.argv.indexOf('--har');
      var fixOpt = process.argv.indexOf('--fixture');
      var portOpt = process.argv.indexOf('--port');

      if (fixOpt > -1) {
        app.use(_express2.default.static(__dirname + '/spec/fixtures/html'));

        app.listen(2224, function () {
          console.log('serving fixture pages at http://localhost:2224/');
        });
      } else {
        (function () {

          if (harOpt > -1) {
            harfile = process.argv[harOpt + 1];
          }

          if (portOpt > -1) {
            port = process.argv[portOpt + 1];

            // need to add host cmd line arg for host?
            url = { port: port, host: 'localhost' };
          }

          var har = new _har2.default(harfile);
          var corpse = new _corpse2.default(har, app, url);

          corpse.init().then(function () {
            corpse.listen(function () {
              console.log('listening...');
            });
          }).catch(function (err) {
            console.log(err);
          });
        })();
      }
    }
  }]);

  return Main;
}();

exports.default = Main;
