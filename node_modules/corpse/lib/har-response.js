'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ISIMAGE = /^image/i;
var ISTEXT = /^text/i;

var HARResponse = function () {
  function HARResponse() {
    var _this = this;

    var response = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, HARResponse);

    this.status = response.status;
    this.statusText = response.statusText;
    this.headers = {};
    this.cookies = response.cookies;
    this.content = response.content;
    this.body = this._parseBody(response);
    this.redirectURL = response.redirectURL;
    this.headersSize = response.headersSize;
    this.bodySize = response.bodySize;

    response.headers && response.headers.forEach(function (hdr) {
      _this.headers[hdr.name] = hdr.value;
    });
  }

  _createClass(HARResponse, [{
    key: '_parseBody',
    value: function _parseBody(response) {
      var ver = process.version;

      var text = response.content && response.content.text || '';
      var mime = response.content && response.content.mimeType;

      if (text && ISIMAGE.test(mime)) {
        return this._createImageBuffer(text);
      }

      return text;
    }
  }, {
    key: '_createImageBuffer',
    value: function _createImageBuffer(image) {
      var enc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'base64';
      var Buff = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Buffer;
      var ver = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : process.version;

      var buf = void 0;
      var v = ver.match(/^v(\d+)/);
      var major = v && v[1] && parseInt(v[1], 10);

      // Version 5.1.0 has the `from' method but when 
      // called with a 'base64' argument, it throws a 
      //     TypeError: base64 is not a function
      // Since Buffer instantiation is not deprecated 
      // until version 6 so check the major for version 
      // and fail if equal or less than 5.

      if (typeof Buff.from === 'function' && major > 5) {
        buf = Buff.from(image, enc);
      } else {
        buf = new Buff(image, enc);
      }

      return buf;
    }
  }, {
    key: 'isTextMime',
    value: function isTextMime() {
      return this.content && ISTEXT.test(this.content.mimeType);
    }
  }, {
    key: 'isImage',
    value: function isImage() {
      return this.content && ISIMAGE.test(this.content.mimeType);
    }
  }]);

  return HARResponse;
}();

exports.default = HARResponse;