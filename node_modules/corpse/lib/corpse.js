'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _har = require('./har');

var _har2 = _interopRequireDefault(_har);

var _url5 = require('url');

var _url6 = _interopRequireDefault(_url5);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PORT = 3034;
var HOST = 'localhost';

var Corpse = function () {
  function Corpse(har, app) {
    var url = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : { port: PORT, host: HOST };

    _classCallCheck(this, Corpse);

    this.har = har;
    this.app = app;
    this.url = url;;

    if (!(har instanceof _har2.default)) {
      throw new TypeError('argument not instance of Har');
    }

    // How do we test this? If we cannot test by class, then
    // we test by capability? But which capability: one or 
    // all of them? (e.g. app.get, app.post, app.listen, etc)
    if (typeof app.route !== 'function') {
      throw new TypeError('argument must have router stack');
    }
  }

  _createClass(Corpse, [{
    key: 'init',
    value: function init() {
      var _this = this;

      return this.har.init().then(function (har) {

        har.entries.forEach(function (entry) {
          _this._buildRoute(entry);
        });

        return;
      });
    }
  }, {
    key: 'listen',
    value: function listen(fn) {
      var _url = this.url;
      var port = _url.port;
      var host = _url.host;

      this.app.set('host', host || '128.0.0.1');

      console.log('preparing ' + this.app.get('host') + ' on port ' + port);
      this.app.listen(port, fn);
    }
  }, {
    key: '_buildRoute',
    value: function _buildRoute(entry) {
      var req = entry.request;
      var res = entry.response;
      var method = req.getMethodForRoute();

      this.app[method](req.getPathname(), this._buildResponse(res));
    }
  }, {
    key: '_buildResponse',
    value: function _buildResponse(response) {
      var _this2 = this;

      var body = response.body;
      var _url2 = this.url;
      var host = _url2.host;
      var port = _url2.port;


      if (response.isTextMime()) {
        body = this._scrubBodyHrefs(body);
        body = this._scrubBodyImgs(body);
      }

      return function (req, res) {
        Object.keys(response.headers).forEach(function (key) {
          var hdrval = response.headers[key];

          if (/^Location$/i.test(key)) {
            hdrval = _this2._scrubBodyHrefs(hdrval);
          }

          // Lets handle the setting of cookies differently
          // in order to gain more control over them
          if (/^Set-Cookie$/i.test(key)) {
            return;
          }

          res.set(key, hdrval);
        });

        response.cookies && response.cookies.forEach && response.cookies.forEach(function (c) {
          res.cookie(c.name, c.value, { path: c.path, domain: '' + host });
        });

        if (response.isImage()) {
          res.set('Content-Type', response.content.mimeType);
        }

        res.status(response.status);
        res.send(body);
      };
    }
  }, {
    key: '_scrubBodyHrefs',
    value: function _scrubBodyHrefs(body) {
      var _url3 = this.url;
      var port = _url3.port;
      var host = _url3.host;

      var regex = /(https?:)?\/\/[\.\w-]+(:\d+)?/gi;
      var rplst = 'http://' + host + ':' + port;
      return body.replace(regex, rplst);
    }
  }, {
    key: '_scrubBodyImgs',
    value: function _scrubBodyImgs(body) {
      var _this3 = this;

      var _url4 = this.url;
      var port = _url4.port;
      var host = _url4.host;

      var regex = /src="([^"]+)/gi;
      var curPath = body.match(regex);

      curPath && curPath.forEach(function (src) {

        var path = _this3.har.getImageRoute(src);

        var newSrc = 'src="http://' + host + ':' + port + path;
        var regx = new RegExp('/' + src + '/gi');
        body = body.replace(src, newSrc);
      });

      return body;
    }
  }]);

  return Corpse;
}();

exports.default = Corpse;