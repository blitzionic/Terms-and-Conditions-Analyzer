'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _harEntry = require('./har-entry');

var _harEntry2 = _interopRequireDefault(_harEntry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Har = function () {
  function Har(path) {
    _classCallCheck(this, Har);

    this.path = path;
    this.rawJSON = null;
    this.imagemap = {};
    this.entries = [];
  }

  _createClass(Har, [{
    key: 'init',
    value: function init() {
      var _this = this;

      return new Promise(function (resolve, reject) {

        _fs2.default.access(_this.path, _fs2.default.F_OK | _fs2.default.R_OK, function (err) {
          if (err) {
            reject(err);
          } else {
            _fs2.default.readFile(_this.path, function (err, har) {
              var json = void 0;

              if (err) {
                reject(err);
              }

              _this.har = har;

              try {
                json = JSON.parse(_this.har);
                _this.log = {
                  version: json.log.version,
                  creator: json.log.creator
                };
                _this.pages = json.log.pages;
                _this.entries = json.log.entries.map(function (entry) {
                  var ent = new _harEntry2.default(entry);
                  if (ent.isImage()) {
                    _this.imagemap[ent.getImageName()] = ent.request.url;
                  }
                  return ent;
                });

                resolve(_this);
              } catch (e) {
                reject(e);
              }
            });
          }
        });
      });
    }
  }, {
    key: 'getImageRoute',
    value: function getImageRoute(path) {
      var key = path;
      var slashIdx = path.lastIndexOf('/');

      if (slashIdx > -1) {
        key = path.substr(slashIdx + 1);
      }

      return this.imagemap[key] && this.imagemap[key].pathname;
    }
  }]);

  return Har;
}();

exports.default = Har;