import test from 'blue-tape';
import Har from './../../lib/har';
import Path from 'path';

const harFile = Path.normalize(__dirname + '/../fixtures/www.fixtitious.site/site.har');

test('Subject is an instance of Har', (assert) => {
  const sut = new Har(harFile);
  assert.true(sut instanceof Har);
  assert.end();
});

test('A Har should accept a filename upon instantiation', (assert) => {
  const sut = new Har(harFile);

  assert.equal(sut.path, harFile);
  assert.end();
});

test('A Har when the init method is called returns a Promise', (assert) => {
  const sut = new Har(harFile);

  assert.true(sut.init() instanceof Promise);
  assert.end();
});


test('A Har when the init method is called should throw an error if the file does not exist', (assert) => {
  const noexist = Path.normalize(__dirname + '/../fixtures/www.fixtitious.site.site.har');
  const sut = new Har(noexist);
  
  assert.shouldReject(sut.init(), /ENOENT: no such file or directory/);
  assert.end();
});

test('A Har when the init method is called should throw an error if the file is not readable', (assert) => {
  const noread = Path.normalize(__dirname + '/../fixtures/www.fixtitious.site/no.read.har');
  const sut = new Har(noread);
  
  assert.shouldReject(sut.init(), /EACCES: permission denied/);
  assert.end();
});

test('A Har when the init method is called should throw an error if the file contains malformed JSON', (assert) => {
  const noread = Path.normalize(__dirname + '/../fixtures/www.fixtitious.site/bad.json.har');
  const sut = new Har(noread);
  
  assert.shouldReject(sut.init(), SyntaxError);
  assert.end();
});

test('A Har when the init method is called should parse the har file and return the Har object', (assert) => {
  const sut = new Har(harFile);

  return sut.init()
    .then((returnValue) => {
      assert.true(returnValue instanceof Har);
    });
});

test('A Har when the init method is called should parse the har file and set the correct number of entries', (assert) => {
  const sut = new Har(harFile);

  return sut.init()
    .then((har) => {
      assert.equal(har.entries.length, 5)
    })
});

test('A HAR when the init method is called should set should create an array of images', (assert) => {
  const sut = new Har(harFile);

  return sut.init()
    .then((har) => {
      var map = Object.keys(har.imagemap);
      assert.equal(map.length, 1, 'Should have a length of 1'); 
    });
});

test('A HAR given a key will return the url for the key', (assert) => {
  const sut = new Har(harFile);

  return sut.init()
    .then((har) => {
      assert.equals(typeof har.getImageRoute, 'function', 'should have getImageRoute method');
      assert.equals(sut.getImageRoute('18050415.png'),'/18050415.png', 'should return the correct path');
      assert.equals(sut.getImageRoute('./../../18050415.png'),'/18050415.png', 'should return the correct path');

    })
});




