import fs from 'fs';
import Url from 'url';
import Path from 'path';
import test from 'tape';
import HAREntry from './../../lib/har-entry';
import HARRequest from './../../lib/har-request';

const HARFILE = Path.normalize(__dirname + '/../fixtures/www.fixtitious.site/site.har');
const har = fs.readFileSync(HARFILE);

const setup = () => {
  const json = JSON.parse(har);
  return json.log.entries.pop().request;
}

test('A HARRequest is a HARRequest', (assert) => {
  const fixture = setup();
  const sut = new HARRequest(fixture);

  assert.true(sut instanceof HARRequest);
  assert.end();
});

test('A HARRequest has a url property that is an instance of Url', (assert) => {
  const fixture = setup();
  const expected = {
    protocol: 'http:',
    slashes: true,
    auth: null,
    host: 'www.fixtitious.site:2224',
    port: '2224',
    hostname: 'www.fixtitious.site',
    hash: null,
    search: null,
    query: null,
    pathname: '/two.html',
    path: '/two.html',
    href: 'http://www.fixtitious.site:2224/two.html'
  };

  const sut = new HARRequest(fixture);

  assert.deepEquals(sut.url, expected);
  assert.end();
});

test('A HARRequest should have a headers property correctly set', (assert) => {
  const fixture = setup();
  const expected = { 
    'Accept-Encoding': 'gzip, deflate, sdch',
    'Host': 'www.fixtitious.site:2224',
    'Accept-Language': 'en-US,en;q=0.8',
    'Upgrade-Insecure-Requests': '1',
    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
    'Referer': 'http://www.fixtitious.site:2224/one.html',
    'If-None-Match': 'W/"d0-157a6b39ee0"',
    'Connection': 'keep-alive',
    'If-Modified-Since': 'Sat, 08 Oct 2016 23:49:32 GMT' 
  };
  const sut = new HARRequest(fixture);

  assert.deepEquals(sut.headers, expected);
  assert.end();
});

test('A HARRequest should have the method property correctly set', (assert) => {
  const fixture = setup();
  const sut = new HARRequest(fixture);

  assert.equals(sut.method, 'GET');
  assert.end();
});

test('A HARRequest should have the httpVersion property correctly set', (assert) => {
  const fixture = setup();
  const sut = new HARRequest(fixture);

  assert.equals(sut.httpVersion, 'HTTP/1.1');
  assert.end();
});

test('A HARRequest should have the queryString property correctly set', (assert) => {
  const fixture = setup();
  const sut = new HARRequest(fixture);

  assert.deepEquals(sut.queryString, {});
  assert.end();
});

test('A HARRequest should have the cookies property correctly set', (assert) => {
  const fixture = setup();
  const sut = new HARRequest(fixture);

  assert.deepEquals(sut.cookies, {});
  assert.end();
});

test('A HARRequest should have the headersSize property correctly set', (assert) => {
  const fixture = setup();
  const sut = new HARRequest(fixture);

  assert.equals(sut.headersSize, 538);
  assert.end();
});

test('A HARRequest should have the bodySize property correctly set', (assert) => {
  const fixture = setup();
  const sut = new HARRequest(fixture);

  assert.equals(sut.bodySize, 0);
  assert.end();
});

test('A HARRequest should a method that returns the http method in lower case', (assert) => {
  const fixture = setup();
  const sut = new HARRequest(fixture);

  assert.equals(sut.getMethodForRoute(), 'get');
  assert.end();
});

test('A HARRequest should have a method that returns the url path', (assert) => {
  const fixture = setup();
  const sut = new HARRequest(fixture);

  assert.equals(sut.getPathname(), '/two.html');
  assert.end();
})

