import test from 'blue-tape';
import express from 'express';
import Corpse from './../../lib/corpse';
import Har from './../../lib/har';
import HAREntry from './../../lib/har-entry';
import Path from 'path';

const HARFILE = Path.normalize(__dirname + './../fixtures/www.fixtitious.site/site.har');

const setup = () => {
  const har = new Har(HARFILE);
  const app = express();
  const sut = new Corpse(har, app);

  return sut;
}

const entry = () => {
  return new HAREntry(
    {
      request: {
        method: 'GET',
        url: 'https://www.fixtitious.site:2224/one.html?search=two',
      },
      response: {
        headers: [
          {
            "name": "Accept-Encoding",
            "value": "gzip, deflate, sdch"
          },
          {
            "name": "Host",
            "value": "www.fixtitious.site:2224"
          },
          {
            "name": "Accept-Language",
            "value": "en-US,en;q=0.8"
          },
          {
            "name": "Upgrade-Insecure-Requests",
            "value": "1"
          }
        ],
        status: 200,
        content: {
          mimeType: 'text/html',
          text: '<h1>Hello World</h1>'
        }
      }
    }
  );
}

const pngImgEntry = () => {
  return new HAREntry(
    {
      request: {
        method: 'GET',
        url: 'https://www.fixtitious.site:2224/path/to/pixel.png?search=two',
      },
      response: {
        headers: [
          {
            "name": "Accept-Encoding",
            "value": "gzip, deflate, sdch"
          },
          {
            "name": "Host",
            "value": "www.fixtitious.site:2224"
          },
          {
            "name": "Accept-Language",
            "value": "en-US,en;q=0.8"
          },
          {
            "name": "Upgrade-Insecure-Requests",
            "value": "1"
          }
        ],
        status: 200,
        content: {
          mimeType: 'image/png',
          text: 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAAAAAA6fptVAAAACklEQVR4nGP6AgAA+gD3odZZSQAAAABJRU5ErkJggg=='
        }
      }
    }
  );
}

const jpgImgEntry = () => {
  return new HAREntry(
    {
      request: {
        method: 'GET',
        url: 'https://www.fixtitious.site:2224/path/to/jpg/img.jpg'
      },
      response: {
          headers: [
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, sdch"
            },
            {
              "name": "Host",
              "value": "www.fixtitious.site:2224"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.8"
            },
            {
              "name": "Upgrade-Insecure-Requests",
              "value": "1"
            }
          ],
          status: 200,
          content: {
            mimeType: 'image/jpg',
            text: 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAAAAAA6fptVAAAACklEQVR4nGP6AgAA+gD3odZZSQAAAABJRU5ErkJggg=='
          }
        }
      }
  );
}

const gifImgEntry = () => {
  return new HAREntry(
    {
      request: {
        method: 'GET',
        url: 'https://www.fixtitious.site:2224/path/to/gif/img.gif'
      },
      response: {
          headers: [
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, sdch"
            },
            {
              "name": "Host",
              "value": "www.fixtitious.site:2224"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.8"
            },
            {
              "name": "Upgrade-Insecure-Requests",
              "value": "1"
            }
          ],
          status: 200,
          content: {
            mimeType: 'image/gif',
            text: 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAAAAAA6fptVAAAACklEQVR4nGP6AgAA+gD3odZZSQAAAABJRU5ErkJggg=='
          }
        }
      }
  );
}

const mockResponse = () => {
  function Response () {
    this.setStatus = null;
    this.setHeaders = {};
    this.setContent = null;
    this.cookies = '';
    this.headers = '';

    this.status = (status) => this.setStatus = status;
    this.set = (name, value) => {
      this.setHeaders[name] = value;
      this.headers = Object.keys(this.setHeaders).map((key) => {
        return `${key}: ${this.setHeaders[key]}`;
      }).join("\n");
    }
    this.send = (content) => this.setContent = content;
    this.cookie = (name, value, opts) => {
      this.cookies += `Set-Cookie: ${name}=${value}; Path=${opts.path}; Domain=${opts.domain}\n`;
    }
  }
  return new Response();
}

const mockApp = () => {
  function App () {
    this.setPort = null;
    this.setFn = null;
    this.values = {};

    this.listen = (port, fn) => {
      this.setPort = port;
      this.setFn = fn;
    }

    this.set = (key, value) => {
      this.values[key] = value;
    }

    this.get = (key) => {
      return this.values[key];
    }

    // so that it passes our constructor check
    this.route = () => {};
  }

  return new App();
}

test('A Corpse is a Corpse', (assert) => {
  const sut = setup();

  assert.true(sut instanceof Corpse);
  assert.end();
});


test('A Corpse should throw an error if not instantiated with a Har argument', (assert) => {
  const fn = () => { new Corpse() };

  assert.throws(fn);
  assert.end();
});

test('A Corpse should throw an error if not instantiated with an express object', (assert) => {
  const fn = () => { new Corpse(setup(), null)};

  assert.throws(fn);
  assert.end();
});

test('A Corpse should build a route', (assert) => {
  const sut = setup();
  const harEntry = entry();
  let layer, route;

  sut._buildRoute(harEntry);
  assert.true(sut.app._router && sut.app._router.stack);

  layer = sut.app._router.stack.pop();
  route = layer.route;

  assert.true(layer.regexp.test('/one.html'));
  assert.equals(route.path, '/one.html');
  assert.true(route.methods.get);
  assert.end();
});

test('A Corpse should build a route response', (assert) => {
  const sut = setup();
  const harEntry = entry();
  const mockRes = mockResponse();
  const response = sut._buildResponse(harEntry.response);

  response(null, mockRes);

  assert.equals(mockRes.setStatus, 200);
  assert.deepEquals(mockRes.setHeaders, {
    'Accept-Encoding': 'gzip, deflate, sdch',
    'Host': 'www.fixtitious.site:2224',
    'Accept-Language': 'en-US,en;q=0.8',
    'Upgrade-Insecure-Requests': '1'
  });
  assert.equals(mockRes.setContent, '<h1>Hello World</h1>');
  assert.end();
});

test('A Corpse should return a Promise when init is called', (assert) => {
  const sut = setup();

  assert.true(sut.init() instanceof Promise);
  assert.end();
});

test('A Corpse, when listen is called, should call its app property\'s listen method', (assert) => {
  const har = new Har();
  const app = mockApp();
  const port = 8001;
  const sut = new Corpse(har, app, {port: port, host: 'localhost'});

  const fn = () => { console.log('Stardate 41153.7') };

  sut.listen(fn);

  assert.equals(app.setPort, port);
  assert.equals(app.setFn, fn);
  assert.end();
});

test('A Corpse properly replaces urls in response bodies', (assert) => {
  const har = new Har();
  const app = mockApp();
  const port = 8001;
  const host = 'localhost';
  const corpse = new Corpse(har, app, {port: port, host: host});

  let body = '<a href="https://www.fake.site:3000/one/two/three">link</a>';
  let expected = '<a href="http://localhost:8001/one/two/three">link</a>';

  assert.equals(corpse._scrubBodyHrefs(body), expected, 'with https protocol');

  // replace http protocol
  body = '<a href="http://www.fake.site:3000/one/two/three">link</a>';
  assert.equals(corpse._scrubBodyHrefs(body), expected, 'with http protocol');

  // without protocol
  body = '<a href="//www.fake.site:3000/one/two/three">link</a>';
  assert.equals(corpse._scrubBodyHrefs(body), expected, 'without protocol');

  // without port
  body = '<a href="https://www.fake.site/one/two/three">link</a>';
  assert.equals(corpse._scrubBodyHrefs(body), expected, 'without port');

  // without port
  body = '<a href="https://1_www.fake-r.site/one/two/three">link</a>';
  assert.equals(corpse._scrubBodyHrefs(body), expected, 'with numbers, dashes, underscores');

  // in javascript
  body = '<script>$.ajax({url: "https://www.cors-address.com/one/two/three",{success:true})</script>';
  expected = '<script>$.ajax({url: "http://localhost:8001/one/two/three",{success:true})</script>';

  assert.equals(corpse._scrubBodyHrefs(body), expected, 'in javascript');

  // in multiple occurences
  body = '<a href="https://www.fake.site/one/two/three">three</a><a href="https://www.fake.site/four">four</a>';
  expected = '<a href="http://localhost:8001/one/two/three">three</a><a href="http://localhost:8001/four">four</a>';

  assert.equals(corpse._scrubBodyHrefs(body), expected, 'with multiple occurences');
  assert.end();
});

test('A Corpse properly replaces relative URLs of img src attributes', (assert) => {

  const har = new Har();
  const png = pngImgEntry();
  const jpg = jpgImgEntry();
  const gif = gifImgEntry();
  const app = mockApp();
  const port = 8081;
  const host = 'localhost';
  const corpse = new Corpse(har, app, {port: port, host: host});

  har.entries.push(png);
  har.entries.push(jpg);
  har.entries.push(gif);

  har.imagemap[png.getImageName()] = png.request.url;
  har.imagemap[jpg.getImageName()] = jpg.request.url;
  har.imagemap[gif.getImageName()] = gif.request.url;

  let body = "<img src=\"./../../images/pixel.png\" />\n<img src=\"./../../img.jpg\" />\n<img src=\"./../old-image/img.gif\" />";
  let expected = "<img src=\"http://localhost:8081/path/to/pixel.png\" />\n<img src=\"http://localhost:8081/path/to/jpg/img.jpg\" />\n<img src=\"http://localhost:8081/path/to/gif/img.gif\" />";

  assert.equals(typeof corpse._scrubBodyImgs, 'function', 'should have a _scrubBodyImgs method');

  assert.equals(corpse._scrubBodyImgs(body), expected, 'should replace relative url with absolute local url');
  assert.end();
});

test('A Corpse correctly redirects', (assert) => {
  const har = new Har();
  const app = mockApp();
  const res = mockResponse();
  const ent = new HAREntry({
    request: {
      method: 'GET',
      url: 'https://www.fixtitious.site:8080/path/to/trigger/'
    },
    response: {
      "status": 302,
      "statusText": "Found",
      "httpVersion": "HTTP/1.0",
      "headers": [
        {
          "name": "Location",
          "value": "https://www.fixtitious.site:8080/redirect/path/location.html"
        }
      ]
    }
  });

  const sut = new Corpse(har, app);
  const fn = sut._buildResponse(ent.response);

  fn({}, res);

  assert.equals(res.setHeaders['Location'], 'http://localhost:3034/redirect/path/location.html', 'should properly scrub the Location header');
  assert.end();
});

test('A Corpse correctly handles cookies', (assert) => {
  const har = new Har();
  const app = mockApp();
  const res = mockResponse();
  const ent = new HAREntry({
    request: {
      method: 'GET',
      url: 'https://www.fixtitious.site:8080/path/to/trigger/'
    },
    response: {
      "status": 200,
      "statusText": "Found",
      "httpVersion": "HTTP/1.0",
      "headers": [
        {
          "name": "Location",
          "value": "https://www.fixtitious.site:8080/redirect/path/location.html"
        },
        {
          "name": "Set-Cookie",
          "value": "dtCookie=|T0xWUitQUk9EfDA; Path=/; Domain=.state.co.us"
        },
        {
          "name": "Set-Cookie",
          "value": "JSESSIONID=00004CHyggSJye7Kle5LfyzDgbv:18bcgl9bq; Path=/"
        },
        {
          "name": "Set-Cookie",
          "value": "TS0173f1c0=01c6cfed709572caf5260de96a36737bb543819fe35bfd27977ee84c1789491d8b02453eac609e53b64f5779f703509b29aadf302a; Path=/"
        },
        {
          "name": "Set-Cookie",
          "value": "TS01a00237=01c6cfed7093626eec9aa5888f056f3a227186ba998d12943413d0b47eb665ba0b200c4696b0672adfb5eed8600f2b5df6de78526b; path=/; domain=.state.co.us"
        }
      ],
      "cookies": [
        {
          "name": "dtCookie",
          "value": "|T0xWUitQUk9EfDA",
          "path": "/",
          "domain": ".state.co.us",
          "expires": null,
          "httpOnly": false,
          "secure": false
        },
        {
          "name": "JSESSIONID",
          "value": "00004CHyggSJye7Kle5LfyzDgbv:18bcgl9bq",
          "path": "/",
          "expires": null,
          "httpOnly": false,
          "secure": false
        },
        {
          "name": "TS0173f1c0",
          "value": "01c6cfed709572caf5260de96a36737bb543819fe35bfd27977ee84c1789491d8b02453eac609e53b64f5779f703509b29aadf302a",
          "path": "/",
          "expires": null,
          "httpOnly": false,
          "secure": false
        },
        {
          "name": "TS01a00237",
          "value": "01c6cfed7093626eec9aa5888f056f3a227186ba998d12943413d0b47eb665ba0b200c4696b0672adfb5eed8600f2b5df6de78526b",
          "path": "/",
          "domain": ".state.co.us",
          "expires": null,
          "httpOnly": false,
          "secure": false
        }
      ],
      content: {
        size: 76,
        mimeType: 'text/html',
        text: '<html><head><title>Nom Nom Nom</title></head><body>Nom Nom Nom</body></html>'
      }
    }
  });
  const sut = new Corpse(har, app);
  const fn = sut._buildResponse(ent.response);

  fn({}, res);

  assert.equals(res.cookies, "Set-Cookie: dtCookie=|T0xWUitQUk9EfDA; Path=/; Domain=localhost\nSet-Cookie: JSESSIONID=00004CHyggSJye7Kle5LfyzDgbv:18bcgl9bq; Path=/; Domain=localhost\nSet-Cookie: TS0173f1c0=01c6cfed709572caf5260de96a36737bb543819fe35bfd27977ee84c1789491d8b02453eac609e53b64f5779f703509b29aadf302a; Path=/; Domain=localhost\nSet-Cookie: TS01a00237=01c6cfed7093626eec9aa5888f056f3a227186ba998d12943413d0b47eb665ba0b200c4696b0672adfb5eed8600f2b5df6de78526b; Path=/; Domain=localhost\n")
  assert.end();
});


