import fs from 'fs';
import Url from 'url';
import Path from 'path';
import test from 'tape';
import HAREntry from './../../lib/har-entry';
import HARRequest from './../../lib/har-request';
import HARResponse from './../../lib/har-response';

const HARFILE = Path.normalize(__dirname + '/../fixtures/www.fixtitious.site/site.har');
const har = fs.readFileSync(HARFILE);

const setup = () => {
  const json = JSON.parse(har);
  return json.log.entries.pop();
}

test('An HAREntry is a HAREntry', (assert) => {
  const fixture = setup();
  const sut = new HAREntry(fixture);

  assert.true(sut instanceof HAREntry);
  assert.end();
});

test('A HAREntry has a HARRequest property', (assert) => {
  const fixture = setup();
  const sut = new HAREntry(fixture);

  assert.true(sut.request instanceof HARRequest);
  assert.end();
});

test('A HAREntry has a HARResponse property', (assert) => {
  const fixture = setup();
  const sut = new HAREntry(fixture);

  assert.true(sut.response instanceof HARResponse);
  assert.end();
});

test('A HAREntry has a method to test if the entry is an image', (assert) => {
  const fixture = setup();
  const sut = new HAREntry(fixture);

  assert.equals(typeof sut.isImage, 'function', 'method does not exist');
  assert.end();
});

test('A HAREntry, when an image, has a method to retrieve the image name', (assert) => {
  const fixture = setup();
  const sut = new HAREntry(fixture);
  const url = Url.parse('https://www.fixtitious.site:8001/path/to/img.png');

  assert.equals(typeof sut.getImageName, 'function', 'method should exist');
  assert.equals(sut.getImageName(), null, 'method should return null if entry not image');

  sut.request.url = url;
  sut.response.content.mimeType = 'image/png';

  assert.equals(sut.getImageName(),'img.png');
  assert.end();
});

